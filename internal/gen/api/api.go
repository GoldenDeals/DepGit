// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AccessRoleRole.
const (
	Admin AccessRoleRole = "admin"
	Read  AccessRoleRole = "read"
	Write AccessRoleRole = "write"
)

// AccessRole defines model for AccessRole.
type AccessRole struct {
	Id     *openapi_types.UUID `json:"id,omitempty"`
	RepoId *openapi_types.UUID `json:"repoId,omitempty"`
	Role   *AccessRoleRole     `json:"role,omitempty"`
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// AccessRoleRole defines model for AccessRole.Role.
type AccessRoleRole string

// Error defines model for Error.
type Error struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Repo defines model for Repo.
type Repo struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// SshKey defines model for SshKey.
type SshKey struct {
	Id     *openapi_types.UUID `json:"id,omitempty"`
	Key    *string             `json:"key,omitempty"`
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// User defines model for User.
type User struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// EditAccessRoleJSONRequestBody defines body for EditAccessRole for application/json ContentType.
type EditAccessRoleJSONRequestBody = AccessRole

// CreateRepoJSONRequestBody defines body for CreateRepo for application/json ContentType.
type CreateRepoJSONRequestBody = Repo

// UpdateRepoJSONRequestBody defines body for UpdateRepo for application/json ContentType.
type UpdateRepoJSONRequestBody = Repo

// CreateAccessRoleJSONRequestBody defines body for CreateAccessRole for application/json ContentType.
type CreateAccessRoleJSONRequestBody = AccessRole

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// EditUserJSONRequestBody defines body for EditUser for application/json ContentType.
type EditUserJSONRequestBody = User

// AddSshKeyJSONRequestBody defines body for AddSshKey for application/json ContentType.
type AddSshKeyJSONRequestBody = SshKey

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete access role
	// (DELETE /access-roles/{roleId})
	DeleteAccessRole(ctx echo.Context, roleId openapi_types.UUID) error
	// Update access role
	// (PUT /access-roles/{roleId})
	EditAccessRole(ctx echo.Context, roleId openapi_types.UUID) error
	// Create a new repository
	// (POST /repos)
	CreateRepo(ctx echo.Context) error
	// Delete repository
	// (DELETE /repos/{repoId})
	DeleteRepo(ctx echo.Context, repoId openapi_types.UUID) error
	// Get repository by ID
	// (GET /repos/{repoId})
	GetRepo(ctx echo.Context, repoId openapi_types.UUID) error
	// Update repository
	// (PUT /repos/{repoId})
	UpdateRepo(ctx echo.Context, repoId openapi_types.UUID) error
	// Get repository access roles
	// (GET /repos/{repoId}/access-roles)
	GetAccessRoles(ctx echo.Context, repoId openapi_types.UUID) error
	// Create access role for repository
	// (POST /repos/{repoId}/access-roles)
	CreateAccessRole(ctx echo.Context, repoId openapi_types.UUID) error
	// Delete SSH key
	// (DELETE /ssh-keys/{keyId})
	DelSshKey(ctx echo.Context, keyId openapi_types.UUID) error
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Delete user
	// (DELETE /users/{userId})
	DeleteUser(ctx echo.Context, userId openapi_types.UUID) error
	// Get user by ID
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId openapi_types.UUID) error
	// Update user
	// (PUT /users/{userId})
	EditUser(ctx echo.Context, userId openapi_types.UUID) error
	// Get user's SSH keys
	// (GET /users/{userId}/ssh-keys)
	GetSshKeys(ctx echo.Context, userId openapi_types.UUID) error
	// Add SSH key for user
	// (POST /users/{userId}/ssh-keys)
	AddSshKey(ctx echo.Context, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteAccessRole converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccessRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roleId" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roleId", runtime.ParamLocationPath, ctx.Param("roleId"), &roleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccessRole(ctx, roleId)
	return err
}

// EditAccessRole converts echo context to params.
func (w *ServerInterfaceWrapper) EditAccessRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "roleId" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "roleId", runtime.ParamLocationPath, ctx.Param("roleId"), &roleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditAccessRole(ctx, roleId)
	return err
}

// CreateRepo converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRepo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRepo(ctx)
	return err
}

// DeleteRepo converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repoId" -------------
	var repoId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, ctx.Param("repoId"), &repoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRepo(ctx, repoId)
	return err
}

// GetRepo converts echo context to params.
func (w *ServerInterfaceWrapper) GetRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repoId" -------------
	var repoId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, ctx.Param("repoId"), &repoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRepo(ctx, repoId)
	return err
}

// UpdateRepo converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRepo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repoId" -------------
	var repoId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, ctx.Param("repoId"), &repoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRepo(ctx, repoId)
	return err
}

// GetAccessRoles converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessRoles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repoId" -------------
	var repoId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, ctx.Param("repoId"), &repoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccessRoles(ctx, repoId)
	return err
}

// CreateAccessRole converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccessRole(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repoId" -------------
	var repoId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "repoId", runtime.ParamLocationPath, ctx.Param("repoId"), &repoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccessRole(ctx, repoId)
	return err
}

// DelSshKey converts echo context to params.
func (w *ServerInterfaceWrapper) DelSshKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "keyId" -------------
	var keyId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "keyId", runtime.ParamLocationPath, ctx.Param("keyId"), &keyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DelSshKey(ctx, keyId)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, userId)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// EditUser converts echo context to params.
func (w *ServerInterfaceWrapper) EditUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditUser(ctx, userId)
	return err
}

// GetSshKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetSshKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSshKeys(ctx, userId)
	return err
}

// AddSshKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddSshKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddSshKey(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/access-roles/:roleId", wrapper.DeleteAccessRole)
	router.PUT(baseURL+"/access-roles/:roleId", wrapper.EditAccessRole)
	router.POST(baseURL+"/repos", wrapper.CreateRepo)
	router.DELETE(baseURL+"/repos/:repoId", wrapper.DeleteRepo)
	router.GET(baseURL+"/repos/:repoId", wrapper.GetRepo)
	router.PUT(baseURL+"/repos/:repoId", wrapper.UpdateRepo)
	router.GET(baseURL+"/repos/:repoId/access-roles", wrapper.GetAccessRoles)
	router.POST(baseURL+"/repos/:repoId/access-roles", wrapper.CreateAccessRole)
	router.DELETE(baseURL+"/ssh-keys/:keyId", wrapper.DelSshKey)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/users/:userId", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)
	router.PUT(baseURL+"/users/:userId", wrapper.EditUser)
	router.GET(baseURL+"/users/:userId/ssh-keys", wrapper.GetSshKeys)
	router.POST(baseURL+"/users/:userId/ssh-keys", wrapper.AddSshKey)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYS2/bOBD+K8TsAntRI6fpSTfvpsgau4ciQU5FDqw4dthIJMtHAsHwfy9ISrYcy7Lk",
	"2EEuecjkPL75vpmRl5DLUkmBwhrIlmDyRyxp+HOa52jMrSzQ/6e0VKgtx/AZZ/7nXOqSWsjAOc4gAVsp",
	"hAyM1VwsYJWARiVnA4/WflC4ErLvoJH6cy+aW4QEKCu5gIeOi86gHuRjtX4if/zE3PrLX7WWeje9XDLc",
	"ssiFvfq8McmFxQVqb6FEY+ginB7g7xaVPBpNQcuhfu7M439YHe3pKd49Ldb3BvWREe2a84+4mAcwGZpc",
	"c2W5FJDB9NuMzKUmJRV0wcWC+KBNQjwXDbdSczQJubv7lzxhZRJCBSM0UJ14DhrvnVtPRrhGdcMtmX6b",
	"QQLPqE30cHkxuZj4jKRCQRWHDK4uJhdXkICi9jGklUaTn4LJdOl/zdgqRlugDXX0MFAftYcUrsPzlui8",
	"fIySwkSgPk++dCS7CZxEw4wYFx7OXVFUPsovhy4KaclcOsEC0MaVJdXVOqI2ON6copqWaFEbyL4vgXtr",
	"Pm1oCAox2RD/L8c1MsisdpjUzWVIvR8SUM7ugvSVcfsKol8Ojf1bsioKV1gU4SJVquB5uJr+ND7pZSuA",
	"PzXOIYM/0k37S+vel7YcBJ5tp7HaqcukH16nGD1pXe6Dwe26rBJIA8ODwqTpwO4fjdRi6EDnwS2YHoTY",
	"5W7it408K5KHQLsA60B6Jp5pwRnhwhNmG6iYMaFE4MtG/1ULrXQZR9QAZa6BO6TJViajJNm6d0CR7VQS",
	"WGBHsW/Qdgc8OUO59+ZR53B8wjdoW9mSHxWZXQ9sQnH1OEcTivr7EEKa9KI6qvMMqEbdePqVtDX5vJt9",
	"/Ny0WfNWmnKLpRnT1tfFplrTqovF/3NjiZxvrwanY/Jrs+9G6J7R8OEG62X/fNw/J44rUTMuWi78Ivma",
	"7sY8fvKrY7p8wurw6KhX8SGTo15Kx42N5tKBmVEfG8a1kNjbqOaRCpt3Xwu4DwfeQ/zh5WOE7GPouxKm",
	"RdF81i+m4PA8Moq5HCkgf/nQhnWSKOOrdQfEgzc2F/NsiJQu4+vngF1tDf4hxQU0Rskt3DigNVeTrY/2",
	"59zMNgTpiL1/J+tNzwvA5zZmD6u/MjjXy+CHkNlkD46j9q9e5OvNa58i1jOpr9nGQfQ+7bYeeiMabvOF",
	"zNuY+ZfZMvRu9OwcBFPGWsP/9ARtQD5yEjSLA2XsJBydMtaAH/Ymt9aPQf3c1MDpAjJIqeLp8yWsHla/",
	"AwAA//9wjFMjghYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
